<?xml version="1.0"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 2.0//EN" "http://www.w3.org/MarkUp/DTD/xhtml2.dtd">
<html xmlns="http://www.w3.org/2002/06/xhtml2/" xml:lang="en">
	<head>
		<title>Desktop Notifications Specification</title>
	</head>
	<body>
		<h>Desktop Notifications Specification</h>
		<section>
			<h>Introduction</h>
			<p>
	 This is a draft standard for a desktop notifications service, through
	 which applications can generate passive popups (sometimes known as
	 "poptarts") to notify the user in an asynchronous manner of events.
	</p>
			<p>
	 This specification explicitly does not include other types of
	 notification presentation such as modal message boxes, window manager
	 decorations or window list annotations.
	</p>
			<p>
	 Example use cases include:
	</p>
			<ul>
				<li>
		 Presence changes in IM programs: for instance, MSN Messenger on
		 Windows pioneered the use of passive popups to indicate presence
		 changes.
		</li>
				<li>Scheduled alarm</li>
				<li>Completed file transfer</li>
				<li>New mail notification</li>
				<li>Low disk space/battery warnings</li>
			</ul>
		</section>
		<section>
			<h>Basic Design</h>
			<p>
	 In order to ensure that multiple notifications can easily be
	 displayed at once, and to provide a convenient implementation, all
	 notifications are controlled by a single session-scoped service which
	 exposes a D-BUS interface.
	</p>
			<p>
	 On startup, a conforming implementation should take the
	 <var>org.freedesktop.Notifications</var> service on
	 the session bus. This service will be referred to as the "notification
	 server" or just "the server" in this document. It can optionally be
	 activated automatically by the bus process, however this is not required
	 and notification server clients must not assume that it is available.
	</p>
			<p>
	 The server should implement the
	 <var>org.freedesktop.Notifications</var> interface on
	 an object with the path <var>"/org/freedesktop/Notifications"</var>.
	 This is the only interface required by this version of the specification.
	</p>
			<p>
	 A notification has the following components:
	</p>
			<section>
				<h>Notification Components</h>
				<table>
					<thead>
						<tr>
							<td>Component</td>
							<td>Description</td>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td>Application Name</td>
							<td>
			 This is the optional name of the application sending the notification.
			 This should be the application's formal name, rather than some sort
			 of ID. An example would be "FredApp E-Mail Client," rather than
			 "fredapp-email-client."
			</td>
						</tr>
						<tr>
							<td>Replaces ID</td>
							<td>
			 An optional ID of an existing notification that this
			 notification is intended to replace.
			</td>
						</tr>
						<tr>
							<td>Notification Icon</td>
							<td>
			 The notification icon. This is represented either as a URI
			 (file:// is the only URI schema supported right now) or a name in
			 a freedesktop.org-compliant icon theme (not a GTK+ stock ID).
			</td>
						</tr>
						<tr>
							<td>Summary</td>
							<td>
			 This is a single line overview of the notification. For instance,
			 "You have mail" or "A friend has come online". It should generally
			 not be longer than 40 characters, though this is not a requirement,
			 and server implementations should word wrap if necessary. The summary
			 must be encoded using UTF-8.
			</td>
						</tr>
						<tr>
							<td>Body</td>
							<td>
								<p>
				This is a multi-line body of text. Each line is a paragraph, server
				implementations are free to word wrap them as they see fit.
			 </p>
								<p>
				The body may contain simple markup as specified in
				<a href="#markup">[Markup]</a>. It must be encoded using UTF-8.
			 </p>
								<p>
				If the body is omitted, just the summary is displayed.
			 </p>
							</td>
						</tr>
						<tr>
							<td>Actions</td>
							<td>
								<p>
				The actions send a request message back to the notification client
				when invoked. This functionality may not be implemented by the
				notification server, conforming clients should check if it is available
				before using it (see the GetCapabilities message in
				<a href="#protocol">[Protocol]</a>). An implementation is free to ignore any
				requested by the client. As an example one possible rendering of
				actions would be as buttons in the notification popup.
			 </p>
								<p>
				Actions are sent over as a list of pairs. Each even element in the
				list (starting at index 0) represents the identifier for the action.
				Each odd element in the list is the localized string that will be
				displayed to the user.
			 </p>
								<p>
				The default action (usually invoked my clicking the notification)
				should have a key named <var>"default"</var>. The name can
				be anything, though implementations are free not to display it.
			 </p>
							</td>
						</tr>
						<tr>
							<td>Hints</td>
							<td>
								<p>See <a href="#hints">[Hints]</a>.</p>
								<p>
				Beyond the core protocol is the hints table. A couple of core
				elements have been moved to hints mostly because in a huge number
				of cases their default values would be sufficent. The elements moved
				to hints are:
			 </p>
								<section>
									<h>Elements Moved to Hints</h>
									<dl>
										<di>
											<dt>Category ID</dt>
											<dd>An optional ID representing the type of notification (the name
							has been changed from Notification Type ID in pervious versions).
							See <a href="#categories">[Categories]</a>.</dd>
										</di>
										<di>
											<dt>Urgency Level</dt>
											<dd>The urgency of the notification. See
							<a href="#urgency-levels">[Urgency Levels]</a>. (Defaults to 1 - Normal)</dd>
										</di>
										<di>
											<dt>Icon Data</dt>
											<dd>Instead of overloading the icon field we now have an icon_data
							field that is used when icon is blank.</dd>
										</di>
									</dl>
								</section>
							</td>
						</tr>
						<tr>
							<td>Expiration Timeout</td>
							<td>
								<p>
				The timeout time in milliseconds since the display of the notification
				at which the notification should automatically close.
			 </p>
								<p>
				If -1, the notification's expiration time is dependent on the
				notification server's settings, and may vary for the type of
				notification.
			 </p>
								<p>
				If 0, the notification never expires.
			 </p>
							</td>
						</tr>
					</tbody>
				</table>
			</section>
			<p>
	 Each notification displayed is allocated a unique ID by the server.
	 This is unique within the session. While the notification server is
	 running, the ID will not be recycled unless the capacity of a uint32 is
	 exceeded.
	</p>
			<p>
	 This can be used to hide the notification before the expiration timeout
	 is reached. It can also be used to atomically replace the notification
	 with another. This allows you to (for instance) modify the contents of
	 a notification while it's on-screen.
	</p>
		</section>
		<section>
			<h>Backwards Compatibility</h>
			<p>
	 Clients should try and avoid making assumptions about the presentation and
	 abilities of the notification server. The message content is the most
	 important thing.
	</p>
			<p>
	 Clients can check with the server what capabilities are supported
	 using the <var>GetCapabilities</var> message. See
	 <a href="#protocol">[Protocol]</a>.
	</p>
			<p>
	 If a client requires a response from a passive popup, it should be
	 coded such that a non-focus-stealing message box can be used in the
	 case that the notification server does not support this feature.
	</p>
		</section>
		<section>
			<h>Markup</h>
			<p>
	 Body text may contain markup. The markup is XML-based, and consists
	 of a small subset of HTML along with a few additional tags.
	</p>
			<p>
	 The following tags should be supported by the notification server.
	 Though it is optional, it is recommended. Notification servers that do
	 not support these tags should filter them out.
	</p>
			<table>
				<tbody>
					<tr>
						<td><code>&lt;b&gt;</code> ...
			 <code>&lt;/b&gt;</code></td>
						<td>Bold</td>
					</tr>
					<tr>
						<td><code>&lt;i&gt;</code> ...
			 <code>&lt;/i&gt;</code></td>
						<td>Italic</td>
					</tr>
					<tr>
						<td><code>&lt;u&gt;</code> ...
			 <code>&lt;/u&gt;</code></td>
						<td>Underline</td>
					</tr>
					<tr>
						<td><code>&lt;a href="..."&gt;</code> ...
			 <code>&lt;/a&gt;</code></td>
						<td>Hyperlink</td>
					</tr>
					<tr>
						<td>
							<code>&lt;img src="..." alt="..."/&gt;</code>
						</td>
						<td>Image</td>
					</tr>
				</tbody>
			</table>
			<p>
	 A full-blown HTML implementation is not required of this spec, and
	 notifications should never take advantage of tags that are not listed
	 above. As notifications are not a substitute for web browsers or complex
	 dialogs, advanced layout is not necessary, and may in fact limit the
	 number of systems that notification services can run on, due to memory
	 usage and screen space. Such examples are PDAs, certain cell phones, and
	 slow PCs or laptops with little memory.
	</p>
			<p>
	 For the same reason, a full XML or XHTML implementation using XSLT or
	 CSS stylesheets is not part of this specification. Information that
	 must be presented in a more complex form should use an application-specific
	 dialog, a web browser, or some other display mechanism.
	</p>
			<p>
	 The tags specified above mark up the content in a way that allows them
	 to be stripped out on some implementations without impacting the actual
	 content.
	</p>
			<section>
				<h>Hyperlinks</h>
				<p>
		Hyperlinks allow for linking one or more words to a URI. There is no
		requirement to allow for images to be linked, and it is highly suggested
		that implementations do not allow this, as there is no clean-looking,
		standard visual indicator for a hyperlinked image.
	 </p>
				<p>
		Hyperlinked text should appear in the standard blue underline format.
	 </p>
				<p>
		Hyperlinks cannot function as a replacement for actions. They are
		used to link to local directories or remote sites using standard URI
		schemes.
	 </p>
				<p>
		Implementations are not required to support hyperlinks.
	 </p>
			</section>
			<section>
				<h>Images</h>
				<p>
		Images may be placed in the notification, but this should be done with
		caution. The image should never exceed 200x100, but this should be thought
		of as a maximum size. Images should always have alternative text
		provided through the <var>alt="..."</var> attribute.
	 </p>
				<p>
		Image data cannot be embedded in the message itself. Images referenced
		must always be local files.
	 </p>
				<p>
		Implementations are not required to support images.
	 </p>
			</section>
		</section>
		<section>
			<h>Icons</h>
			<p>
	 A notification can optionally have an icon specified by the Notification
	 Icon field or by the icon_data hint.
	</p>
			<p>
	 The icon_data field should be a raw image data structure of signature
	 (iiibiiay) which describes the width, height, rowstride, has alpha, bits
	 per sample, channels and image data respectively.
	</p>
		</section>
		<section>
			<h>Categories</h>
			<p>
	 Notifications can optionally have a type indicator. Although neither
	 client or nor server must support this, some may choose to. Those servers
	 implementing categories may use them to intelligently display
	 the notification in a certain way, or group notifications of similar
	 types.
	</p>
			<p>
	 Categories are in
	 <var><samp>class.specific</samp></var> form.
	 <var>class</var> specifies the generic type of notification, and
	 <var>specific</var> specifies the more specific type of
	 notification.
	</p>
			<p>
	 If a specific type of notification does not exist for your notification,
	 but the generic kind does, a notification of type
	 <var><samp>class</samp></var> is acceptable.
	</p>
			<p>
	 Third parties, when defining their own categories, should discuss
	 the possibility of standardizing on the hint with other parties, preferably
	 in a place such as the
	 <a href="#http://freedesktop.org/mailman/listinfo/xdg">xdg</a>
	 mailing list at
	 <a href="#http://freedesktop.org/">freedesktop.org</a>. If it
	 warrants a standard, it will be added to the table above. If no
	 consensus is reached, the category should be in the form of
	 "<var>x-<samp>vendor</samp>.<samp>class</samp>.<samp>name</samp></var>."
	</p>
			<p>
	 The following table lists standard notifications as defined by this spec.
	 More will be added in time.
	</p>
			<section>
				<h>Categories</h>
				<table>
					<thead>
						<tr>
							<td>Type</td>
							<td>Description</td>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td>
								<var>"device"</var>
							</td>
							<td>
			 A generic device-related notification that doesn't fit into
			 any other category.
			</td>
						</tr>
						<tr>
							<td>
								<var>"device.added"</var>
							</td>
							<td>A device, such as a USB device, was added to the system.</td>
						</tr>
						<tr>
							<td>
								<var>"device.error"</var>
							</td>
							<td>A device had some kind of error.</td>
						</tr>
						<tr>
							<td>
								<var>"device.removed"</var>
							</td>
							<td>
			 A device, such as a USB device, was removed from the system.
			</td>
						</tr>
						<tr>
							<td>
								<var>"email"</var>
							</td>
							<td>
			 A generic e-mail-related notification that doesn't fit into any
			 other category.
			</td>
						</tr>
						<tr>
							<td>
								<var>"email.arrived"</var>
							</td>
							<td>A new e-mail notification.</td>
						</tr>
						<tr>
							<td>
								<var>"email.bounced"</var>
							</td>
							<td>A notification stating that an e-mail has bounced.</td>
						</tr>
						<tr>
							<td>
								<var>"im"</var>
							</td>
							<td>
			 A generic instant message-related notification that doesn't fit
			 into any other category.
			</td>
						</tr>
						<tr>
							<td>
								<var>"im.error"</var>
							</td>
							<td>An instant message error notification.</td>
						</tr>
						<tr>
							<td>
								<var>"im.received"</var>
							</td>
							<td>A received instant message notification.</td>
						</tr>
						<tr>
							<td>
								<var>"network"</var>
							</td>
							<td>
			 A generic network notification that doesn't fit into any other
			 category.
			</td>
						</tr>
						<tr>
							<td>
								<var>"network.connected"</var>
							</td>
							<td>
			 A network connection notification, such as successful sign-on to a
			 network service. This should not be confused with
			 <var>device.added</var> for new network devices.
			</td>
						</tr>
						<tr>
							<td>
								<var>"network.disconnected"</var>
							</td>
							<td>
			 A network disconnected notification. This should not be confused with
			 <var>device.removed</var> for disconnected network devices.
			</td>
						</tr>
						<tr>
							<td>
								<var>"network.error"</var>
							</td>
							<td>
			 A network-related or connection-related error.
			</td>
						</tr>
						<tr>
							<td>
								<var>"presence"</var>
							</td>
							<td>
			 A generic presence change notification that doesn't fit into
			 any other category, such as going away or idle.
			</td>
						</tr>
						<tr>
							<td>
								<var>"presence.offline"</var>
							</td>
							<td>An offline presence change notification.</td>
						</tr>
						<tr>
							<td>
								<var>"presence.online"</var>
							</td>
							<td>An online presence change notification.</td>
						</tr>
						<tr>
							<td>
								<var>"transfer"</var>
							</td>
							<td>
			 A generic file transfer or download notification that doesn't fit
			 into any other category.
			</td>
						</tr>
						<tr>
							<td>
								<var>"transfer.complete"</var>
							</td>
							<td>A file transfer or download complete notification.</td>
						</tr>
						<tr>
							<td>
								<var>"transfer.error"</var>
							</td>
							<td>A file transfer or download error.</td>
						</tr>
					</tbody>
				</table>
			</section>
		</section>
		<section>
			<h>Urgency Levels</h>
			<p>
	 Notifications have an urgency level associated with them. This defines
	 the importance of the notification. For example, "Joe Bob signed on"
	 would be a low urgency. "You have new mail" or "A USB device was unplugged"
	 would be a normal urgency. "Your computer is on fire" would be a critical
	 urgency.
	</p>
			<p>Urgency levels are defined as follows:</p>
			<section>
				<h>Urgency Levels</h>
				<table>
					<thead>
						<tr>
							<td>Type</td>
							<td>Description</td>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td>0</td>
							<td>Low</td>
						</tr>
						<tr>
							<td>1</td>
							<td>Normal</td>
						</tr>
						<tr>
							<td>2</td>
							<td>Critical</td>
						</tr>
					</tbody>
				</table>
			</section>
			<p>
	 Developers must use their own judgement when deciding the urgency of a
	 notification. Typically, if the majority of programs are using the same
	 level for a specific type of urgency, other applications should follow
	 them.
	</p>
			<p>
	 For low and normal urgencies, server implementations may display the
	 notifications how they choose. They should, however, have a sane
	 expiration timeout dependent on the urgency level.
	</p>
			<p>
	 Critical notifications should not automatically expire, as they are
	 things that the user will most likely want to know about. They should
	 only be closed when the user dismisses them, for example, by clicking on
	 the notification.
	</p>
		</section>
		<section>
			<h>Hints</h>
			<p>
	 Hints are a way to provide extra data to a notification server that
	 the server may be able to make use of.
	</p>
			<p>
	 Neither clients nor notification servers are required to support any
	 hints. Both sides should assume that hints are not passed, and should
	 ignore any hints they do not understand.
	</p>
			<p>
	 Third parties, when defining their own hints, should discuss the
	 possibility of standardizing on the hint with other parties, preferably
	 in a place such as the
	 <a href="#http://freedesktop.org/mailman/listinfo/xdg">xdg</a>
	 mailing list at
	 <a href="#http://freedesktop.org/">freedesktop.org</a>. If it
	 warrants a standard, it will be added to the table above. If no
	 consensus is reached, the hint name should be in the form of
	 <var>"x-<samp>vendor</samp>-<samp>name</samp>."</var></p>
			<p>
	 The value type for the hint dictionary in D-BUS is of the
	 <var>DBUS_TYPE_VARIANT</var> container type. This allows different
	 data types (string, integer, boolean, etc.) to be used for hints. When
	 adding a dictionary of hints, this type must be used, rather than putting
	 the actual hint value in as the dictionary value.
	</p>
			<p>
	 The following table lists the standard hints as defined by this
	 specification. Future hints may be proposed and added to this list
	 over time. Once again, implementations are not required to support these.
	</p>
			<section>
				<h>Standard Hints</h>
				<table>
					<thead>
						<tr>
							<td>Name</td>
							<td>Value Type</td>
							<td>Description</td>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td>
								<var>"urgency"</var>
							</td>
							<td>byte</td>
							<td>
			 The urgency level.
			</td>
						</tr>
						<tr>
							<td>
								<var>"category"</var>
							</td>
							<td>string</td>
							<td>
			 The type of notification this is.
			</td>
						</tr>
						<tr>
							<td>
								<var>"desktop-entry"&gt;</var>
							</td>
							<td>string</td>
							<td>
			 This specifies the name of the desktop filename representing the
			 calling program. This should be the same as the prefix used for the
			 application's .desktop file. An example would be "rhythmbox" from
			 "rhythmbox.desktop". This can be used by the daemon to retrieve the
			 correct icon for the application, for logging purposes, etc.
			</td>
						</tr>
						<tr>
							<td>
								<var>"image_data"</var>
							</td>
							<td>(iiibiiay)</td>
							<td>
				This is a raw data image format which describes the width, height,
				rowstride, has alpha, bits per sample, channels and image data
				respectively. We use this value if the icon field is left blank.
			</td>
						</tr>
						<tr>
							<td>
								<var>"sound-file"</var>
							</td>
							<td>string</td>
							<td>
			 The path to a sound file to play when the notification pops up.
			</td>
						</tr>
						<tr>
							<td>
								<var>"suppress-sound"</var>
							</td>
							<td>boolean</td>
							<td>
			 Causes the server to suppress playing any sounds, if it has that
			 ability. This is usually set when the client itself is going to
			 play its own sound.
			</td>
						</tr>
						<tr>
							<td>
								<var>"x"</var>
							</td>
							<td>int</td>
							<td>
			 Specifies the X location on the screen that the notification should
			 point to. The <var>"y"</var> hint must also be specified.
			</td>
						</tr>
						<tr>
							<td>
								<var>"y"</var>
							</td>
							<td>int</td>
							<td>
			 Specifies the Y location on the screen that the notification should
			 point to. The <var>"x"</var> hint must also be specified.
			</td>
						</tr>
					</tbody>
				</table>
			</section>
		</section>
		<section>
			<h>D-BUS Protocol</h>
			<p>
	 The following messages <em>must</em> be supported by all
	 implementations.
	</p>
			<section>
				<h>Message commands</h>
				<section>
					<h>org.freedesktop.Notifications.GetCapabilities</h>
					<code class="funcdef">STRING_ARRAY
			 org.freedesktop.Notifications.GetCapabilities ()</code>
					<p>
		 This message takes no parameters.
		</p>
					<p>
		 It returns an array of strings. Each string describes an optional
		 capability implemented by the server. The following values are
		 defined by this spec:
		</p>
					<section>
						<h>Server Capabilities</h>
						<table>
							<tbody>
								<tr>
									<td>
										<var>"actions"</var>
									</td>
									<td>
				 The server will provide the specified actions to the user. Even if
				 this cap is missing, actions may still be specified by the client,
				 however the server is free to ignore them.
				</td>
								</tr>
								<tr>
									<td>
										<var>"body"</var>
									</td>
									<td>
				 Supports body text. Some implementations may only show the
				 summary (for instance, onscreen displays, marquee/scrollers)
				</td>
								</tr>
								<tr>
									<td>
										<var>"body-hyperlinks"</var>
									</td>
									<td>
				 The server supports hyperlinks in the notifications.
				</td>
								</tr>
								<tr>
									<td>
										<var>"body-images"</var>
									</td>
									<td>
				 The server supports images in the notifications.
				</td>
								</tr>
								<tr>
									<td>
										<var>"body-markup"</var>
									</td>
									<td>
				 Supports markup in the body text. If marked up text is sent
				 to a server that does not give this cap, the markup will show
				 through as regular text so must be stripped clientside.
				</td>
								</tr>
								<tr>
									<td>
										<var>"icon-multi"</var>
									</td>
									<td>
				 The server will render an animation of all the frames in a given
				 image array. The client may still specify multiple frames even if
				 this cap and/or <var>"icon-static"</var> is missing, however
				 the server is free to ignore them and use only the primary frame.
				</td>
								</tr>
								<tr>
									<td>
										<var>"icon-static"</var>
									</td>
									<td>
				 Supports display of exactly 1 frame of any given image array.
				 This value is mutually exclusive with
				 <var>"icon-multi"</var>, it is a protocol error for the
				 server to specify both.
				</td>
								</tr>
								<tr>
									<td>
										<var>"sound"</var>
									</td>
									<td>
				 The server supports sounds on notifications. If returned, the
				 server must support the <var>"sound-file"</var> and
				 <var>"suppress-sound"</var> hints.
				</td>
								</tr>
							</tbody>
						</table>
					</section>
					<p>
		 New vendor-specific caps may be specified as long as they start with
		 <var>"x-<samp>vendor</samp>"</var>. For instance,
		 <var>"x-gnome-foo-cap"</var>. Capability names must not
		 contain spaces. They are limited to alpha-numeric characters and dashes
		 (<var>"-"</var>).
		</p>
				</section>
				<section>
					<h>org.freedesktop.Notifications.Notify</h>
					<code class="funcdef">UINT32
			 org.freedesktop.Notifications.Notify (STRING app_name, UINT32 replaces_id, STRING app_icon, STRING summary, STRING body, ARRAY actions, DICT hints, INT32 expire_timeout)</code>
					<p>
		 Sends a notification to the notification server.
		</p>
					<section>
						<h>Notify Parameters</h>
						<table>
							<thead>
								<tr>
									<td>Name</td>
									<td>Type</td>
									<td>Description</td>
								</tr>
							</thead>
							<tbody>
								<tr>
									<td>
										<var>app_name</var>
									</td>
									<td>STRING</td>
									<td>
				 The optional name of the application sending the notification.
				 Can be blank.
				</td>
								</tr>
								<tr>
									<td>
										<var>replaces_id</var>
									</td>
									<td>UINT32</td>
									<td>
				 The optional notification ID that this notification replaces. The
				 server must atomically (ie with no flicker or other visual cues)
				 replace the given notification with this one. This allows clients to
				 effectively modify the notification while it's active. A value of
				 value of 0 means that this notification won't replace any
				 existing notifications.
				</td>
								</tr>
								<tr>
									<td>
										<var>app_icon</var>
									</td>
									<td>STRING</td>
									<td>
				 The optional program icon of the calling application. See <a href="#icons">[Icons]</a>.
				 Can be an empty string, indicating no icon.
				</td>
								</tr>
								<tr>
									<td>
										<var>summary</var>
									</td>
									<td>STRING</td>
									<td>The summary text briefly describing the notification.</td>
								</tr>
								<tr>
									<td>
										<var>body</var>
									</td>
									<td>STRING</td>
									<td>The optional detailed body text. Can be empty.</td>
								</tr>
								<tr>
									<td>
										<var>actions</var>
									</td>
									<td>ARRAY</td>
									<td>
				 Actions are sent over as a list of pairs. Each even element in
				 the list (starting at index 0) represents the identifier for the
				 action. Each odd element in the list is the localized string
				 that will be displayed to the user.
				</td>
								</tr>
								<tr>
									<td>
										<var>hints</var>
									</td>
									<td>DICT</td>
									<td>
				 Optional hints that can be passed to the server from the client
				 program. Although clients and servers should never assume each other
				 supports any specific hints, they can be used to pass along
				 information, such as the process PID or window ID, that the server
				 may be able to make use of. See <a href="#hints">[Hints]</a>. Can be
				 empty.
				</td>
								</tr>
								<tr>
									<td>
										<var>expire_timeout</var>
									</td>
									<td>INT32</td>
									<td>
										<p>
					The timeout time in milliseconds since the display of the notification at
					which the notification should automatically close.
				 </p>
										<p>
					If -1, the notification's expiration time is dependent on the
					notification server's settings, and may vary for the type of
					notification.

					If 0, never expire.
				 </p>
									</td>
								</tr>
							</tbody>
						</table>
					</section>
					<p>
		 If <var>replaces_id</var> is 0, the return value is a
		 UINT32 that represent the notification. It is unique, and will not be
		 reused unless a MAXINT number of notifications
		 have been generated. An acceptable implementation may just use an
		 incrementing counter for the ID. The returned ID is always greater than
		 zero. Servers must make sure not to return zero as an ID.
		</p>
					<p>
		 If <var>replaces_id</var> is not 0, the returned value
		 is the same value as <var>replaces_id</var>.
		</p>
				</section>
				<section>
					<h>org.freedesktop.Notifications.CloseNotification</h>
					<code class="funcdef">void
			 org.freedesktop.Notifications.CloseNotification (UINT32 id)</code>
					<p>
		 Causes a notification to be forcefully closed and removed from the user's
		 view. It can be used, for example, in the event that what the
		 notification pertains to is no longer relevant, or to cancel a
		 notification with no expiration time.
		</p>
					<p>
		 The <var>NotificationClosed</var> signal is emitted by this
		 method.
		</p>
					<p>
		 If the notification no longer exists, an empty D-BUS Error message is
		 sent back.
		</p>
				</section>
				<section>
					<h>org.freedesktop.Notifications.GetServerInformation</h>
					<code class="funcdef">
			 void
			 org.freedesktop.Notifications.GetServerInformation (out STRING name, out STRING vendor, out STRING version)</code>
					<p>
		 This message returns the information on the server. Specifically,
		 the server name, vendor, and version number.
		</p>
					<section>
						<h>GetServerInformation Return Values</h>
						<table>
							<thead>
								<tr>
									<td>Name</td>
									<td>Type</td>
									<td>Description</td>
								</tr>
							</thead>
							<tbody>
								<tr>
									<td>
										<var>name</var>
									</td>
									<td>STRING</td>
									<td>The product name of the server.</td>
								</tr>
								<tr>
									<td>
										<var>vendor</var>
									</td>
									<td>STRING</td>
									<td>
				 The vendor name. For example, "KDE," "GNOME,"
				 "freedesktop.org," or "Microsoft."
				</td>
								</tr>
								<tr>
									<td>
										<var>version</var>
									</td>
									<td>STRING</td>
									<td>The server's version number.</td>
								</tr>
							</tbody>
						</table>
					</section>
				</section>
			</section>
			<section>
				<h>Signals</h>
				<section>
					<h>org.freedesktop.Notifications.NotificationClosed</h>
					<code class="funcdef">org.freedesktop.Notifications.NotificationClosed (UINT32 id, UINT32 reason)</code>
					<p>
		 A completed notification is one that has timed out, or has been
		 dismissed by the user.
		</p>
					<section>
						<h>NotificationClosed Parameters</h>
						<table>
							<thead>
								<tr>
									<td>Name</td>
									<td>Type</td>
									<td>Description</td>
								</tr>
							</thead>
							<tbody>
								<tr>
									<td>
										<var>id</var>
									</td>
									<td>UINT32</td>
									<td>The ID of the notification that was closed.</td>
								</tr>
								<tr>
									<td>
										<var>reason</var>
									</td>
									<td>UINT32</td>
									<td>
										<p>The reason the notification was closed.</p>
										<p>1 - The notification expired.</p>
										<p>2 - The notification was dismissed by the user.</p>
										<p>3 - The notification was closed by a call to
							 <var>CloseNotification</var>.</p>
										<p>4 - Undefined/reserved reasons.</p>
									</td>
								</tr>
							</tbody>
						</table>
					</section>
					<p>
		 The ID specified in the signal is invalidated
		 <em>before</em> the signal is sent and may not be used
		 in any further communications with the server.
		</p>
				</section>
				<section>
					<h>org.freedesktop.Notifications.ActionInvoked</h>
					<code class="funcdef">org.freedesktop.Notifications.ActionInvoked (UINT32 id, STRING action_key)</code>
					<p>
		 This signal is emitted when one of the following occurs:
		</p>
					<ul>
						<li>
			 The user performs some global "invoking" action upon a notification.
			 For instance, clicking somewhere on the notification itself.
			</li>
						<li>
			 The user invokes a specific action as specified in the original
			 Notify request. For example, clicking on an action button.
			</li>
					</ul>
					<section>
						<h>ActionInvoked Parameters</h>
						<table>
							<thead>
								<tr>
									<td>Name</td>
									<td>Type</td>
									<td>Description</td>
								</tr>
							</thead>
							<tbody>
								<tr>
									<td>
										<var>id</var>
									</td>
									<td>UINT32</td>
									<td>
				 The ID of the notification emitting the ActionInvoked signal.
				</td>
								</tr>
								<tr>
									<td>
										<var>action_key</var>
									</td>
									<td>STRING</td>
									<td>
				 The key of the action invoked. These match the keys sent over
				 in the list of actions.
				</td>
								</tr>
							</tbody>
						</table>
					</section>
					<p class="note"><strong>Note:</strong>
			Clients should not assume the server will generate this signal. Some
			servers may not support user interaction at all, or may not support
			the concept of being able to "invoke" a notification.
		 </p>
				</section>
			</section>
		</section>
	</body>
</html>
